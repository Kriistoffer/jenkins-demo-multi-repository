def test1_res
def test2_res
def test1_desc
def test2_desc
def port
def yamlfile

pipeline {
    agent any
    tools {
        nodejs "nodejs"
    }
    environment {
        baseUrl = "https://github.com/Kriistoffer"
        allRepositories = "jenkins-demo,jenkins-demo-2,jenkins-demo-3"
        PACKAGEMANAGER = "npm"
        slackChannel = "team1-dependency_check"
        project_version = "1.45"
        jenkinsdemo_version = "1.3"
        jenkinsdemo2_version = "1.35"
        jenkinsdemo3_version = "1.4"
    }
    stages {
        stage("Setup") {
            steps {
                script {
                    echo "Cleaning up..."
                    cleanWs()

                    if (!fileExists("logs")) {
                        sh "mkdir logs"
                    }
                    env.allRepositories.tokenize(",").each { repo -> 
                        sh "git clone ${env.baseUrl}/${repo}"
                    }

                    yamlfile = readYaml file: 'jenkins-demo-2/data.yaml'
                }
            }
        }
        stage("Node") {
            steps {
                script {
                    echo "Skipping this stage for now."
                    // dir("jenkins-demo/myapp/") {
                    //     sh "npm install"
                    //     sh "echo 'JENKINS_DEMO V.${jenkinsdemo_version}' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "npm audit > ${WORKSPACE}/logs/tmp.txt || true"
                    //     sh "sed -i '1,2d' ${WORKSPACE}/logs/tmp.txt"
                    //     sh "head -n -8 ${WORKSPACE}/logs/tmp.txt >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    // }

                    // dir("jenkins-demo-2/") {
                    //     sh "npm install"
                    //     sh "echo 'JENKINS_DEMO-2 V.${jenkinsdemo2_version}' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "npm audit > ${WORKSPACE}/logs/tmp.txt || true"
                    //     sh "sed -i '1,2d' ${WORKSPACE}/logs/tmp.txt"
                    //     sh "head -n -8 ${WORKSPACE}/logs/tmp.txt >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    // }

                    // dir("jenkins-demo-3/mysecondapp/src/") {
                    //     sh "npm install"
                    //     sh "echo 'JENKINS_DEMO-3 V.${jenkinsdemo3_version}' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "npm audit > ${WORKSPACE}/logs/tmp.txt || true"
                    //     sh "sed -i '1,2d' ${WORKSPACE}/logs/tmp.txt"
                    //     sh "head -n -8 ${WORKSPACE}/logs/tmp.txt >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    //     sh "echo '\n' >> ${WORKSPACE}/logs/project_${env.project_version}.txt"
                    // }
                }
            }
        }
        stage("Reading YAML") {
            steps {
                script {
                    port = yamlfile.database.port
                    // test1_desc = yamlfile.test.test_cases.id1.description
                    // test2_desc = yamlfile.test.test_cases.id2.description
                    // test1_res = yamlfile.test.test_cases.id1.result
                    // test2_res = yamlfile.test.test_cases.id2.result

                    echo "Port: ${port}"
                    echo "Test 1 Description: ${yamlfile.test.test_cases}"
                    // echo "Test 1 Result: ${test1_res}"
                    // echo "Test 2 Description: ${test2_desc}"
                    // echo "Test 2 Result: ${test2_res}"
                }
            }
        }
    }
    post {
        success {
            script {
                echo "success"
            }
        }
        failure {
            script {
                echo "failure"
            }
        }
        always {
            echo "Finished running."
        }
    }
}